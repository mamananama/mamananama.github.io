<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-06-08T17:27:27+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Docker Desktop 설치하기</title><link href="http://localhost:4000/categories/docker/docker-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0.html" rel="alternate" type="text/html" title="Docker Desktop 설치하기" /><published>2025-06-03T16:25:54+09:00</published><updated>2025-06-03T16:25:54+09:00</updated><id>http://localhost:4000/categories/docker/docker-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/categories/docker/docker-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0.html"><![CDATA[<h2 id="리눅스-이외의-환경에서-docker-실행하기">리눅스 이외의 환경에서 Docker 실행하기</h2>

<p>Docker는 리눅스 컨테이너를 사용하는 기술이다.</p>

<p>하지만 모든 개발 및 서비스 환경이 리눅스 운영체제 위에서 작동하지 않기 때문에, Docker를 리눅스 외부에서 실행할 수 있어야한다.</p>

<p>개발 및 서비스 환경이 리눅스인 경우에 네이티브로 Docker를 실행하면 되지만, Window 또는 MacOS의 환경에서는 Docker를 직접 실행할 수 없다.</p>

<p>따라서 Docker를 실행하기 위한 리눅스 가상 머신이 구성되어야 한다.</p>

<h2 id="docker-desktop으로-설치하기">Docker Desktop으로 설치하기</h2>

<p>Docker를 Windows PRO 및 Enterprise 버전에서 사용할 수 있는 방법 중 하나는 “Docker Desktop”을 사용하는 방법이다.</p>

<p>이는 Windows PRO 및 Enterprise 버전에 내장된 가상 환경을 통해 Docker를 실행할 수 있도록 하는 프로그램이다.</p>

<h3 id="준비과정">준비과정</h3>

<ul>
  <li>
    <p>Hyper-V 활성화하기</p>

    <p>Windwos에서 제공하는 가상화 기능을 사용하기 위해 Hyper-V를 활성화 한다.</p>

    <p><img src="/assets/posts/250603/windows features.png" alt="&quot;Windows 기능 켜기/끄기&quot;에서 Hyper-V 활성화" /></p>

    <p>Hyper-V 기능을 켜면, Windows를 재시작하여 적용한다.</p>
  </li>
  <li>
    <p>Docker Desktop 다운로드</p>

    <p><a href="https://www.docker.com" id="url">Docker Desktop 다운로드 링크</a></p>

    <p>위 링크를 통해 Docker Desktop을 설치할 수 있다.</p>

    <p><img src="/assets/posts/250603/docker_page.png" alt="Docker Desktop 다운로드 페이지" width="100%" /></p>

    <p>페이지의 “Download Docker Desktop” 버튼을 클릭하여 설치 파일을 다운받는다.</p>
  </li>
  <li>
    <p>Docker Desktop 설치 및 실행 Hub 계정 생성 / 로그인</p>

    <p>Docker Desktop 설치 후 최초 실행시 Docker Hub 계정 로그인을 요구한다.</p>

    <p>혹은 Google, GitHub 계정 연동을 통해 로그인한다.</p>

    <p><img src="/assets/posts/250603/docker.png" alt="Docker Desktop 최초 실행시 Docker Hub 로그인을 요구한다" /></p>
  </li>
  <li>
    <p>로그인 완료 후 Docker Desktop 실행</p>

    <p>Docker Desktop의 로그인이 완료되면, 다음과 같은 화면이 나타난다.</p>

    <p><img src="/assets/posts/250603/dockerdesktop.png" alt="Docker Desktop 화면" /></p>

    <p><img src="/assets/posts/250603/trayicon.png" alt="트레이 아이콘에서 실행중인 Docker Desktop 확인" /></p>
  </li>
  <li>
    <p>터미널(powershell)에서 Docker 실행 테스트</p>

    <p>터미널에 <code class="language-plaintext highlighter-rouge">docker container run hello-world</code>를 입력하여 Docker가 정상적으로 설치되었는지 확인한다.</p>

    <p>이 명령어를 통해 “<code class="language-plaintext highlighter-rouge">hello-world</code>“라는 특별한 이미지를 다운받게되고, 컨테이너가 실행된다.</p>

    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="w">  </span><span class="n">docker</span><span class="w"> </span><span class="nx">container</span><span class="w"> </span><span class="nx">run</span><span class="w"> </span><span class="nx">hello-world</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div>    </div>

    <p><img src="/assets/posts/250603/hello_docker.png" alt="hello-world" /></p>

    <p>위 이미지와 동일한 결과가 나타난다면, Docker가 정상적으로 설치된 것이다.</p>
  </li>
</ul>

<h2 id="참고-링크">참고 링크</h2>

<p><a href="https://www.docker.com/" id="url">Docker</a></p>

<p><a href="https://docs.docker.com/" id="url">Dockerdocs</a></p>]]></content><author><name></name></author><category term="Docker" /><category term="Docker" /><summary type="html"><![CDATA[리눅스 이외의 환경에서 Docker 실행하기]]></summary></entry><entry><title type="html">Container 알아보기</title><link href="http://localhost:4000/categories/Docker/docker-introduction" rel="alternate" type="text/html" title="Container 알아보기" /><published>2025-05-14T21:43:54+09:00</published><updated>2025-05-14T21:43:54+09:00</updated><id>http://localhost:4000/categories/Docker/docker-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/categories/Docker/docker-introduction"><![CDATA[<h2 id="프로그램-배포에서-발생하는-문제">프로그램 배포에서 발생하는 문제</h2>

<p>본격적인 Docker 및 Container 기술을 사용하기 이전에, 이를 사용하는 환경에 대해 알아보자.</p>

<p>로컬 환경에서 알맞게 돌아가던 개발 프로그램을 실제 서비스 환경으로 배포하는 경우, 프로그램이 실행되지 않는 문제가 발생할 수 있다.</p>

<p>개발 환경에 설치한 라이브러리가 서비스 환경에 설치되어 있지 않다던가, OS가 다르다던가, 환경변수가 다르다던가, 혹은 설치된 JVM 버전이 맞지 않다던가…</p>

<p>이런 문제를 해결하기 위해 개발 환경에서 사용하는 프로그램을 모두 설치하고, 환경변수를 설정하고, 라이브러리를 설치하고, 모든 것이 완료되면 배포한다.</p>

<p><img src="/assets/posts/250512/no.png" alt="개발 프로그램만 배포했을 경우 필요한 환경이 갖춰지지 않아 배포 환경에서 실행이 되지 않을 수 있다." width="70%" style="padding: 16px" /></p>

<p>하지만 이는 매우 비효율적이며 많은 시간이 소비되는 번거로운 작업이다.</p>

<h2 id="container를-사용한-배포">Container를 사용한 배포</h2>

<p>Container Image를 통해 배포하는 경우, 위에서 언급한 문제를 쉽게 해결할 수 있다.</p>

<p><img src="/assets/posts/250512/yes.png" alt="Container Image를 사용하여 배포하면 프로그램 실행에 필요한 환경을 먼저 구성한 채 배포할 수 있다." width="70%" style="padding: 16px" /></p>

<p>프로그램의 실행에 필요한 환경을 미리 구성하여 Container Image로 저장하면, 프로그램을 배포할 때 미리 구성된 환경을 사용하여 프로그램을 실행할 수 있다.</p>

<p>이렇게 Container Image만 관리하여 프로그램을 배포하면 개발 환경 또는 운영 환경의 환경이 다르더라도 프로그램이 정상적으로 실행될 수 있도록 관리할 수 있다.</p>

<h2 id="container는-하나의-리눅스-커널-위에서-실행되는-독립적인-리눅스-시스템">Container는 하나의 리눅스 커널 위에서 실행되는 독립적인 리눅스 시스템</h2>

<p>각각의 Container는 하나의 리눅스 커널 위에서 실행되는 독립적인 리눅스 시스템이다.</p>

<p>여기에서 가상머신과 차이가 발생하는데, 가상머신은 각 가상머신 별로 독립적인 커널을 사용하여 독립적인 운영체제를 실행한다.</p>

<p>따라서 Container와 비교했을 때 가상머신의 환경은 무겁고, 일반적인 기기 환경에서 동시에 여러 가상머신을 실행하여 서비스를 제공하는 것에 무리가 있다.</p>

<p>Container는 하나의 공유되는 커널을 통하여 독립적인 시스템을 실행하기 때문에, 리눅스에서 실행되는 프로세스 단위로 볼 수 있다.</p>

<p>따라서 Container는 가상머신을 통하여 제공되는 환경에 비하여 더 가볍고, 더 많은 시스템을 동시에 실행할 수 있다.</p>

<p><img src="/assets/posts/250512/containers.png" alt="Container는 리눅스 커널 위에서 독립적으로 실행된다." style="padding: 16px" /></p>

<h2 id="docker">Docker</h2>

<p>Docker는 이러한 Container를 이용할 수 있게 해주는 고급 사용자 인터페이스, 관리 시스템이다.</p>

<p>Docker에서는 이러한 Container를 Docker Image로 사용하며, 이 이미지에는 서비스 시스템을 구축하는 것을 넘어, 서비스를를 실행할 수 있는 완전한 환경이 포함되어있다.</p>

<p>예를들어 올바를 Java 버전이나, Tomcat 등의 라이브러리들이 이미지에 구축할 수 있다.</p>

<p>Docker는 이러한 Image를 통하여 다른 환경에 쉽게 서비스를 배포할 수 있도록 하는 기술이다.</p>

<hr />
<h2 id="참고-링크">참고 링크</h2>

<p><a href="https://ko.wikipedia.org/wiki/LXC" id="url">LXC(Linux Containers) 위키피디아 링크</a></p>

<p><a href="https://linuxcontainers.org/" id="url">Linux Containers 공식 홈페이지</a></p>

<p><a href="https://www.udemy.com/course/docker-java-developer/" id="url">[Udemy] Docker - Java 개발자를 위한 완벽 실습 과정</a></p>]]></content><author><name></name></author><category term="Docker" /><category term="Docker" /><summary type="html"><![CDATA[Container 알아보기]]></summary></entry></feed>